%% This BibTeX bibliography file was created using BibDesk.
%% http://bibdesk.sourceforge.net/


%% Created for kmorel at 2012-09-14 22:44:42 -0600 


%% Saved with string encoding Unicode (UTF-8) 



@inproceedings{Baker2010,
	Abstract = {Multicore nodes have become ubiquitous in just a few years. At the same time, writing portable parallel software for multicore nodes is extremely challenging. Widely available programming models such as OpenMP and Pthreads are not useful for devices such as graphics cards, and more flexible programming models such as RapidMind are only available commercially. OpenCL represents the first truly portable standard, but its availability is limited. In the presence of such transition, we have developed a minimal application programming interface (API) for multicore nodes that allows us to write portable parallel linear algebra software that can use any of the aforementioned programming models and any future standard models. We utilize C++ template meta-programming to enable users to write parallel kernels that can be executed on a variety of node types, including Cell, GPUs and multicore CPUs. The support for a parallel node is provided by implementing a Node object, according to the requirements specified by the API. This ability to provide custom support for particular node types gives developers a level of control not allowed by the current slate of proprietary parallel programming APIs. We demonstrate implementations of the API for a simple vector dot-product on sequential CPU, multicore CPU and GPU nodes.},
	Annote = {This is a paper from Mike Heroux and gang about the multi-core parallel technique using functors.  It makes for a vary portable system parallel system and this is demonstrated on intel threaded building blocks (TBB) and CUDA.},
	Author = {Christopher G. Baker and Michael A. Heroux and H. Carter Edwards and Alan B. Williams},
	Booktitle = {Proceedings of the 18th Euromicro International Conference on Parallel, Distributed and Network-Based Processing (PDP)},
	Date-Added = {2012-09-14 22:44:33 -0600},
	Date-Modified = {2012-09-14 22:44:33 -0600},
	Doi = {10.1109/PDP.2010.49},
	Month = {February},
	Note = {{DOI}~10.1109/PDP.2010.49},
	Pages = {601 -- 606},
	Title = {A Light-weight {API} for Portable Multicore Programming},
	Url = {http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5452412},
	Year = {2010},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5452412},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/PDP.2010.49}}

@techreport{Ahrens2000,
	Annote = {One of the seminal papers on introducing parallelism and data streaming into VTK specifically and into pipelines in general.},
	Author = {James Ahrens and Charles Law and Will Schroeder and Ken Martin and Michael Papka},
	Date-Added = {2012-09-12 19:19:11 -0600},
	Date-Modified = {2012-09-12 19:19:11 -0600},
	Institution = {Los Alamos National Laboratory},
	Number = {\#LAUR-00-1620},
	Title = {A Parallel Approach for Efficiently Visualizing Extremely Large, Time-Varying Datasets},
	Year = {2000}}

@inbook{Thrust,
	Annote = {A portable STL-like template library for use on multi- and many-core systems.},
	Author = {Nathan Bell and Jared Hoberock},
	Chapter = {Thrust: A Productivity-Oriented Library for {CUDA}},
	Date-Added = {2012-09-12 19:08:38 -0600},
	Date-Modified = {2012-09-12 19:08:38 -0600},
	Month = {October},
	Pages = {359--371},
	Publisher = {Morgan Kaufmann},
	Title = {GPU Computing Gems, Jade Edition},
	Year = {2011}}

@article{MapReduce,
	Annote = {The seminal MapReduce paper.},
	Author = {Jeffrey Dean and Sanjay Ghemawat},
	Date-Added = {2012-09-12 19:03:21 -0600},
	Date-Modified = {2012-09-12 19:03:21 -0600},
	Journal = {Communications of the ACM},
	Month = {January},
	Number = {1},
	Pages = {107--113},
	Title = {{MapReduce}: Simplified Data Processing on Large Clusters},
	Volume = {51},
	Year = {2008}}

@inproceedings{Moreland2011:LDAV,
	Annote = {Description of the Dax toolkit, a framework for building algorithms for GPU computers and, later, exascale computers.},
	Author = {Kenneth Moreland and Utkarsh Ayachit and Berk Geveci and Kwan-Liu Ma},
	Booktitle = {Proceedings of the IEEE Symposium on Large-Scale Data Analysis and Visualization},
	Date-Added = {2012-09-12 18:40:43 -0600},
	Date-Modified = {2012-09-12 18:40:43 -0600},
	Doi = {10.1109/LDAV.2011.6092323},
	Month = {October},
	Note = {{DOI}~10.1109/LDAV.2011.6092323},
	Pages = {97--104},
	Title = {Dax Toolkit: A Proposed Framework for Data Analysis and Visualization at Extreme Scale},
	Year = {2011},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/LDAV.2011.6092323}}

@techreport{VisAnalysisExtremeScale,
	Author = {Chris Johnson and Rob Ross},
	Date-Added = {2012-09-12 18:01:48 -0600},
	Date-Modified = {2012-09-12 18:01:48 -0600},
	Month = {October},
	Title = {Visualization and Knowledge Discovery: Report from the {DOE}/{ASCR} Workshop on Visual Analysis and Data Exploration at Extreme Scale},
	Year = {2007}}

@techreport{ExascaleRoadMap,
	Annote = {A workshop report prediciting the nature of an Exascale machine.  A reasonable source to pull some numbers comparing petascale to exascale machines (a la slide of doom).  See [Moreland2011:LDAV] for a usage.},
	Author = {Jack Dongarra and Pete Beechman and others},
	Date-Added = {2012-09-12 17:57:28 -0600},
	Date-Modified = {2012-09-12 17:57:28 -0600},
	Institution = {University of Tennessee},
	Month = {January},
	Number = {ut-cs-10-652},
	Title = {The International Exascale Software Project RoadMap},
	Url = {http://www.cs.utk.edu/~library/TechReports/2010/ut-cs-10-652.pdf},
	Year = {2010},
	Bdsk-Url-1 = {http://www.cs.utk.edu/~library/TechReports/2010/ut-cs-10-652.pdf}}

@article{Howison2011,
	Annote = {Describes a system for using hybrid MPI+OpenMP/threaded parallelism for improving volume rendering.  Predictably, the hybrid method is faster than MPI-only.  (I, however, feel the comparison was performed unfairly because they used a crappy image composition algorithm.)  They also demonstrate compositing with a very large number of cores (216K), but only by using an MPI_Reduce.},
	Author = {Mark Howison and E. Wes Bethel and Hank Childs},
	Date-Added = {2012-09-12 19:44:22 -0400},
	Date-Modified = {2012-09-12 19:44:22 -0400},
	Doi = {10.1109/TVCG.2011.24},
	Journal = {IEEE Transactions on Visualization and Computer Graphics},
	Month = {January},
	Note = {{DOI}~10.1109/TVCG.2011.24},
	Number = {1},
	Pages = {17--29},
	Title = {Hybrid Parallelism for Volume Rendering on Large-, Multi- and Many-core Systems},
	Volume = {18},
	Year = {2011},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/TVCG.2011.24}}

@article{Camp2010,
	Annote = {An example of hybrid MPI/OpenMP (thread) parallelism.  Uses shared memory to allow streamline integration to progress further before having to load a new data block or pass the streamline to another process.  This is an extension of [Pugmire2009].},
	Author = {David Camp and Christoph Garth and Hank Childs and David Pugmire and Kenneth Joy},
	Date-Added = {2012-09-12 19:43:46 -0400},
	Date-Modified = {2012-09-12 19:43:46 -0400},
	Doi = {10.1109/TVCG.2010.259},
	Journal = {IEEE Transactions on Visualization and Computer Graphics},
	Month = {December},
	Note = {{DOI}~10.1109/TVCG.2010.259},
	Title = {Streamline Integration using {MPI}-Hybrid Parallelism on Large Multi-Core Architecture},
	Year = {2010},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/TVCG.2010.259}}
